{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initState","amount","exrate","localStorage","getItem","minFee","maxFee","feeRate","cableFee","totalAmount","stateReducer","state","action","newState","console","log","payload","type","setItem","Error","amountTWD","fee","App","useReducer","dispatch","handleChange","e","target","value","Container","fixed","Box","m","Grid","container","justify","alignItems","item","xs","sm","md","FormControl","fullWidth","variant","InputLabel","htmlFor","OutlinedInput","id","onChange","startAdornment","InputAdornment","position","labelWidth","FormHelperText","Math","ceil","toString","replace","Button","color","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8b57a17.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nimport { Container, Box, Grid, Button, FormControl, InputLabel, OutlinedInput, InputAdornment, FormHelperText } from '@material-ui/core';\n\n\nconst initState = {\n    amount: '',\n    exrate: localStorage.getItem('exrate') ? localStorage.getItem('exrate') : '1',\n    minFee: localStorage.getItem('minFee') ? localStorage.getItem('minFee') : '200',\n    maxFee: localStorage.getItem('maxFee') ? localStorage.getItem('maxFee') : '800',\n    feeRate: localStorage.getItem('feeRate') ? localStorage.getItem('feeRate') : '0.0005',\n    cableFee: '',\n    totalAmount: '0'\n};\n\nconst stateReducer = (state, action) => {\n\n    const newState = { ...state };\n\n    console.log(action.payload);\n    \n\n    switch (action.type) {\n\n        case 'UPDATE_AMOUNT':\n\n            newState.amount = action.payload;\n\n            break;\n\n        case 'UPDATE_EXRATE':\n\n            newState.exrate = action.payload;\n            localStorage.setItem('exrate', action.payload);\n\n            break;\n\n        case 'UPDATE_MINFEE':\n\n            newState.minFee = action.payload;\n            localStorage.setItem('minFee', action.payload);\n\n            break;\n\n        case 'UPDATE_MAXFEE':\n\n            newState.maxFee = action.payload;\n            localStorage.setItem('maxFee', action.payload);\n\n            break;\n\n        case 'UPDATE_FEERATE':\n\n            newState.feeRate = action.payload;\n            localStorage.setItem('feeRate', action.payload);\n\n            break;\n\n        case 'UPDATE_CABLEFEE':\n\n            newState.cableFee = action.payload;\n\n            break;\n\n        case 'RESET':\n\n            newState.amount = initState.amount;\n            newState.cableFee = initState.cableFee;\n\n            break;\n\n        default:\n            \n            throw new Error('Something went wrong.');\n\n    }\n\n    const amountTWD = +newState.amount * +newState.exrate;\n    let fee = amountTWD * +newState.feeRate;\n\n    if (fee > +newState.maxFee) fee = +newState.maxFee;\n    if (fee < +newState.minFee) fee = +newState.minFee;\n\n    fee += +newState.cableFee;\n\n    newState.totalAmount = amountTWD + fee;\n\n    return newState;\n\n};\n\nfunction App() {\n\n    const [state, dispatch] = useReducer(stateReducer, initState);\n\n    const handleChange = (e, type) => dispatch({ type, payload: e.target.value });\n\n    const handleReset = () => dispatch({ type: 'RESET' });\n        \n    return (\n\n        <div>\n\n            <Container fixed>\n                <Box m={2}>\n                    <Grid\n                        container\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item xs={12} sm={12} md={12}>\n                            <Box m={2}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"outlined-adornment-amount\">匯款金額</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-amount\"\n                                        type=\"number\"\n                                        value={state.amount}\n                                        onChange={(e) => handleChange(e, 'UPDATE_AMOUNT')}\n                                        startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                        labelWidth={65}\n                                    />\n                                </FormControl>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={12} md={12}>\n                            <Box m={2}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"outlined-adornment-exrate\">兌台幣匯率</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-exrate\"\n                                        type=\"number\"\n                                        value={state.exrate}\n                                        onChange={(e) => handleChange(e, 'UPDATE_EXRATE')}\n                                        labelWidth={80}\n                                    />\n                                    <FormHelperText>預設 1(台幣兌台幣), 美金約填 30, 以此類推</FormHelperText>\n                                </FormControl>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <Box m={2}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"outlined-adornment-minFee\">最低手續費金額</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-minFee\"\n                                        type=\"number\"\n                                        value={state.minFee}\n                                        onChange={(e) => handleChange(e, 'UPDATE_MINFEE')}\n                                        startAdornment={<InputAdornment position=\"start\">NTD$</InputAdornment>}\n                                        labelWidth={115}\n                                    />\n                                </FormControl>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <Box m={2}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"outlined-adornment-maxFee\">最高手續費金額</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-maxFee\"\n                                        type=\"number\"\n                                        value={state.maxFee}\n                                        onChange={(e) => handleChange(e, 'UPDATE_MAXFEE')}\n                                        startAdornment={<InputAdornment position=\"start\">NTD$</InputAdornment>}\n                                        labelWidth={115}\n                                    />\n                                </FormControl>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={12} md={12}>\n                            <Box m={2}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"outlined-adornment-feeRate\">手續費比例</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-feeRate\"\n                                        type=\"number\"\n                                        value={state.feeRate}\n                                        onChange={(e) => handleChange(e, 'UPDATE_FEERATE')}\n                                        labelWidth={80}\n                                    />\n                                </FormControl>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={12} md={12}>\n                            <Box m={2}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"outlined-adornment-cableFee\">郵電費</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-cableFee\"\n                                        type=\"number\"\n                                        value={state.cableFee}\n                                        onChange={(e) => handleChange(e, 'UPDATE_CABLEFEE')}\n                                        startAdornment={<InputAdornment position=\"start\">NTD$</InputAdornment>}\n                                        labelWidth={50}\n                                    />\n                                    <FormHelperText>一般 NTD$ 300, 全額 NTD$ 600</FormHelperText>\n                                </FormControl>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={12} md={12}>\n                            <Box m={2}>\n                                <strong>總收費 NTD$ <span >{Math.ceil(state.totalAmount).toString().replace(/\\d(?=(?:\\d{3})+\\b)/g, '$&,')}</span></strong>\n                            </Box>\n                        </Grid> \n                        <Grid item xs={12} sm={12} md={12}>\n                            <Box m={2}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => handleReset('RESET')}\n                                >\n                                    重置\n                                </Button>\n                            </Box>\n                        </Grid> \n                    </Grid>\n                </Box>\n            </Container>\n            \n        </div>\n        \n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}